{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","app/components/crud/CrudStyle.js","app/components/crud/Crud.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","theme","createStyles","formLabel","color","formBox","width","backgroundColor","border","borderRadius","boxShadow","tablehead","fontWeight","Crud","classes","React","useState","userList","setUserList","updateItem","setUpdateItem","addNew","setAddNew","open","vertical","horizontal","message","state","setState","className","Box","formWrapper","p","Grid","container","direction","justify","alignItems","enableReinitialize","initialValues","name","email","gender1","validationSchema","Yup","required","onSubmit","values","newState","resetForm","data","itemIndex","findIndex","val","id","length","console","log","mb","FormLabel","component","variant","size","inputWidth","placeholder","disabled","fullWidth","mt","aria-label","defaultValue","FormControlLabel","value","control","Radio","label","Button","type","onClick","TableContainer","Paper","Table","table","TableHead","TableRow","TableCell","align","colSpan","TableBody","map","scope","filter","Snackbar","autoHideDuration","anchorOrigin","onClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c58d6f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Hey React!\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React \n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n\n    formLabel:{\n        // fontWeight: '600',\n        color: '#353535'\n    },\n\n    formBox:{\n      width: '50%',\n      backgroundColor: '#f5f5f5',\n      border: '1px solid #efefef',\n      borderRadius: '4px',\n      boxShadow: '0px 0px 32px 0px rgba(214, 215, 226, 0.3)',\n    },\n\n    tablehead:{\n        '& th':{\n            fontWeight: '600 !important',\n        }\n    },\n\n    }),\n);\n\nexport default useStyles;","import React,  { useState } from 'react';\nimport { Formik } from 'formik';\nimport { Form } from 'formik';\nimport * as Yup from \"yup\";\nimport Box from '@material-ui/core/Box';\nimport {TextField} from 'formik-material-ui';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport { RadioGroup } from 'formik-material-ui';\nimport useStyles from './CrudStyle';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n\n\n\nexport default function Crud() {\n    const classes = useStyles({});\n    const [userList, setUserList] = React.useState([]);\n    const [updateItem, setUpdateItem] = React.useState();\n    const [addNew, setAddNew] = React.useState(true);\n    \n    const deleteItem = (id) => {\n        setUserList(userList.filter(val => val.id !== id));\n    }\n\n    const [state, setState] = React.useState({\n        open: false,\n        vertical: 'top',\n        horizontal: 'center',\n        message:''\n    });\n    \n      const { vertical, horizontal, open, message } = state;\n    \n      const handleClick = (newState) => {\n          console.log(newState)\n        setState({ open: true, ...newState });    \n      };\n    \n      const handleClose = () => {\n        setState({ ...state, open: false });\n      };\n\n    return (\n\n        <div className=\"crudform\">\n            <Box className={classes.formWrapper} p={8}>\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                    <Box className={classes.formBox} p={4}>\n                        <Formik\n                            enableReinitialize={true}\n                            initialValues={{\n                                name: updateItem ? updateItem.name:'',\n                                email: updateItem ? updateItem.email:'',\n                                gender1: updateItem ? updateItem.gender1:'',\n                            }}\n                            validationSchema={Yup.object({\n                                name: Yup.string().required(),\n                                email: Yup.string().email().required(),\n                                gender1: Yup.string().required(\"Gender is required\"),\n                            })}\n                            onSubmit={(values,{resetForm}) => { \n                                if(updateItem){\n                                    let data = [...userList];\n                                    let itemIndex = data.findIndex(val => val.id === updateItem.id);\n                                    data[itemIndex].name = values.name;\n                                    data[itemIndex].email = values.email;\n                                    data[itemIndex].gender1 = values.gender1;\n                                    setUserList(data);\n                                    setUpdateItem(null)\n                                }else{\n                                    let data = {...values};\n                                    data.id = userList.length;\n                                    setUserList([...userList, data]);\n                                }\n                                handleClick({ vertical: 'bottom', horizontal: 'left',message:updateItem?'Record updated successfully':'Record added successfully' })\n                                resetForm();\n                                setAddNew(false)\n                            }}>\n                            {({values}) => {\n                                return(\n                                    \n                                    <Form>\n                                        {((userList.length<1) || updateItem || addNew) &&\n                                            <div>\n                                                <Box mb={3}>\n                                                    <Box mb={1}>\n                                                        <FormLabel className={classes.formLabel} component=\"legend\" required>Name</FormLabel>\n                                                    </Box>\n                                                    <TextField\n                                                        name=\"name\"\n                                                        variant=\"outlined\"\n                                                        color=\"primary\"\n                                                        size=\"small\"\n                                                        className={classes.inputWidth}\n                                                        placeholder=\"Name\"\n                                                        disabled={false}\n                                                        fullWidth\n                                                    />\n                                                </Box>\n\n                                                <Box mb={3}>\n                                                    <Box mb={2}>\n                                                        <FormLabel className={classes.formLabel} component=\"legend\">Email *\n                                                        </FormLabel>\n                                                    </Box>\n                                                    <Box mt={1}>\n                                                        <TextField\n                                                            name=\"email\"\n                                                            variant=\"outlined\"\n                                                            color=\"primary\"\n                                                            size=\"small\"\n                                                            className={classes.inputWidth}\n                                                            placeholder=\"Email\"\n                                                            disabled={false}\n                                                            fullWidth\n                                                        />\n                                                    </Box>\n                                                </Box>\n\n                                                <Box mb={3}>\n                                                    <Box mb={2}>\n                                                        <FormLabel className={classes.formLabel} component=\"legend\">Gender *\n                                                        </FormLabel>\n                                                    </Box>\n                                                    <Box mt={1}>\n                                                        <RadioGroup aria-label=\"gender\" defaultValue={values.gender1} name=\"gender1\">\n                                                            <FormControlLabel value=\"male\" control={<Radio color=\"primary\" size=\"small\" />} label=\"Male\" />\n                                                            <FormControlLabel value=\"female\" control={<Radio color=\"primary\" size=\"small\"/>} label=\"Female\" />\n                                                            <FormControlLabel value=\"other\" control={<Radio color=\"primary\" size=\"small\"/>} label=\"Other\" />\n                                                        </RadioGroup>\n                                                    </Box>\n                                                </Box>\n\n                                                <Box>\n                                                    <Button color=\"primary\" variant=\"contained\" type=\"submit\">{updateItem?'Update':'Submit'}</Button>\n                                                </Box>\n                                            </div>\n                                        }\n                                    </Form>\n                                )\n                            }}\n                        </Formik>\n                        \n                        {((userList.length>0) && !updateItem && !addNew) &&\n\n                            <Box mt={4}>\n                               \n                                <Box  mb={4}>\n                                    <Button onClick={() => setAddNew(true)} variant=\"contained\" color=\"primary\">\n                                        Add new Record\n                                    </Button>\n                                </Box>\n                                \n                                <TableContainer component={Paper}>\n                                    <Table className={classes.table} aria-label=\"simple table\">\n                                        <TableHead>\n                                            <TableRow className={classes.tablehead}>\n                                                <TableCell align=\"left\">Name</TableCell>\n                                                <TableCell align=\"left\">Email</TableCell>\n                                                <TableCell align=\"left\">Gender</TableCell>\n                                                <TableCell colSpan={2} align=\"center\">Action</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n\n                                        <TableBody>\n                                            \n                                            {userList.map(val => (\n                                                <TableRow key={val}>\n                                                    <TableCell component=\"th\" scope=\"row\">\n                                                        {val.name}\n                                                    </TableCell>\n                                                    \n                                                    <TableCell align=\"left\">{val.email}</TableCell>\n                                                    <TableCell align=\"left\">{val.gender1}</TableCell>\n                                                    <TableCell align=\"left\">\n                                                        <Button size=\"small\" color=\"secondary\" variant=\"contained\" onClick={() => deleteItem(val.id)}>Delete</Button>\n                                                    </TableCell>\n                                                    <TableCell align=\"left\">\n                                                        <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={() => setUpdateItem(val)}>Update</Button>\n                                                    </TableCell>\n                                                </TableRow>\n\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n\n                            </Box>\n                        }\n                    </Box>\n                </Grid>\n            </Box>\n            <Snackbar\n                open={open} \n                autoHideDuration={3000} \n                anchorOrigin={{vertical:'bottom' , horizontal:'left'}}\n                onClose={handleClose}\n                message={message}\n                key={vertical + horizontal}\n            />\n\n        </div>\n\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Crud from './app/components/crud/Crud';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Crud/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}